{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "prometheus",
          "uid": "VictoriaMetrics"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "description": "Power Consumption Graphs",
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 6,
  "links": [],
  "liveNow": true,
  "panels": [
    {
      "collapsed": false,
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 18,
      "panels": [],
      "title": "Now",
      "type": "row"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "VictoriaMetrics"
      },
      "description": "High/Low power cost period",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "links": [
            {
              "targetBlank": true,
              "title": "Live",
              "url": "http://ioteleinfo.local/index.html"
            }
          ],
          "mappings": [
            {
              "options": {
                "1": {
                  "color": "dark-blue",
                  "index": 0,
                  "text": "Bleu - Heures Pleines"
                },
                "2": {
                  "color": "super-light-blue",
                  "index": 1,
                  "text": "Bleu - Heures Creuses"
                },
                "3": {
                  "color": "#a9a2a2",
                  "index": 2,
                  "text": "Blanc - Heures Pleines"
                },
                "4": {
                  "color": "#f5f4f4",
                  "index": 3,
                  "text": "Blanc - Heures Creuses"
                },
                "5": {
                  "color": "dark-red",
                  "index": 4,
                  "text": "Rouge - Heures Pleines"
                },
                "6": {
                  "color": "super-light-red",
                  "index": 5,
                  "text": "Rouge - Heures Creuses"
                }
              },
              "type": "value"
            }
          ],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "bool_yes_no"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 6,
        "x": 0,
        "y": 1
      },
      "id": 41,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "10.4.2",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "sensors_teleinfo_PTEC_int @now()",
          "format": "time_series",
          "hide": false,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "PTEC"
        }
      ],
      "title": "Periode",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "binary": {
              "left": "sensors {type: teleinfo-HCHC}",
              "reducer": "sum",
              "right": "sensors {type: teleinfo-HCHP}"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        }
      ],
      "type": "stat"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "VictoriaMetrics"
      },
      "description": "Largest consumers: Car, Water heating, Electric heating",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "links": [
            {
              "targetBlank": true,
              "title": "Live",
              "url": "http://ioteleinfo.local/index.html"
            }
          ],
          "mappings": [],
          "max": 5000,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "yellow",
                "value": 1000
              },
              {
                "color": "orange",
                "value": 2000
              },
              {
                "color": "red",
                "value": 4000
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "zigbee-power_l1"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Car Charging"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "zigbee-power_l2"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Water Heater"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "zigbee-power_l3"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Heaters"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "zigbee-power"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Car+Water+Heating"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 7,
        "x": 6,
        "y": 1
      },
      "id": 44,
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "auto"
      },
      "pluginVersion": "10.4.2",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "sensors_zigbee_power{location=\"C01~Garage~PowerMeter\"} @ now()",
          "hide": true,
          "instant": true,
          "legendFormat": "Car+Water+Heating",
          "range": false,
          "refId": "TotalClamps"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "sensors_zigbee_power_l1{location=\"C01~Garage~PowerMeter\"} @ now()",
          "hide": false,
          "instant": true,
          "legendFormat": "Car",
          "range": false,
          "refId": "Car"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "sensors_zigbee_power_l2{location=\"C01~Garage~PowerMeter\"} @ now()",
          "hide": false,
          "instant": true,
          "legendFormat": "Water",
          "range": false,
          "refId": "Water"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "sensors_zigbee_power_l3{location=\"C01~Garage~PowerMeter\"} @ now()",
          "hide": false,
          "instant": true,
          "legendFormat": "Heaters",
          "range": false,
          "refId": "Heaters"
        }
      ],
      "title": "Consumers (W)",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "binary": {
              "left": "sensors {type: teleinfo-HCHC}",
              "reducer": "sum",
              "right": "sensors {type: teleinfo-HCHP}"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        }
      ],
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "VictoriaMetrics"
      },
      "description": "Current Power on outlets",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "links": [
            {
              "targetBlank": true,
              "title": "Live",
              "url": "http://ioteleinfo.local/index.html"
            }
          ],
          "mappings": [],
          "max": 2500,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "yellow",
                "value": 100
              },
              {
                "color": "orange",
                "value": 500
              },
              {
                "color": "red",
                "value": 1000
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 9,
        "w": 11,
        "x": 13,
        "y": 1
      },
      "id": 28,
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "auto"
      },
      "pluginVersion": "10.4.2",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "sensors_zigbee_power{location=~\"P.+\"} @ now()",
          "hide": false,
          "instant": true,
          "interval": "",
          "legendFormat": "{{location}}",
          "range": false,
          "refId": "Zigbee Plugs"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "sensors_zigbee_power_l2{location=\"C02~Garage~PowerMeter\"} @ now()",
          "hide": false,
          "instant": true,
          "interval": "",
          "legendFormat": "VMC",
          "range": false,
          "refId": "Zigbee Clamps"
        }
      ],
      "title": "Outlets (W)",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "P(.*)~(.*)~OnOff",
            "renamePattern": "$2"
          }
        }
      ],
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "VictoriaMetrics"
      },
      "description": "Current Total Power consumption",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "links": [
            {
              "targetBlank": true,
              "title": "Live",
              "url": "http://ioteleinfo.local/index.html"
            }
          ],
          "mappings": [],
          "max": 9000,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "#EAB839",
                "value": 500
              },
              {
                "color": "orange",
                "value": 3000
              },
              {
                "color": "red",
                "value": 6000
              }
            ]
          },
          "unit": "voltamp"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 0,
        "y": 3
      },
      "id": 26,
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "auto"
      },
      "pluginVersion": "10.4.2",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "sensors_teleinfo_PAPP @ now()",
          "format": "time_series",
          "hide": false,
          "instant": true,
          "legendFormat": "Total (teleinfo)",
          "range": false,
          "refId": "TotalTeleinfo"
        }
      ],
      "title": "Total (VA - teleinfo)",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "binary": {
              "left": "sensors {type: teleinfo-HCHC}",
              "reducer": "sum",
              "right": "sensors {type: teleinfo-HCHP}"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        }
      ],
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "VictoriaMetrics"
      },
      "description": "Current Total Power consumption",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "links": [
            {
              "targetBlank": true,
              "title": "Live",
              "url": "http://ioteleinfo.local/index.html"
            }
          ],
          "mappings": [],
          "max": 9000,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "#EAB839",
                "value": 500
              },
              {
                "color": "orange",
                "value": 3000
              },
              {
                "color": "red",
                "value": 6000
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 3,
        "y": 3
      },
      "id": 126,
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "auto"
      },
      "pluginVersion": "10.4.2",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "sensors_zigbee_power_b{location=\"C03~Garage~PowerMeter\"} @ now()",
          "format": "time_series",
          "hide": false,
          "instant": true,
          "legendFormat": "Total (clamp)",
          "range": false,
          "refId": "A"
        }
      ],
      "title": "Total (W - clamp)",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "binary": {
              "left": "sensors {type: teleinfo-HCHC}",
              "reducer": "sum",
              "right": "sensors {type: teleinfo-HCHP}"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        }
      ],
      "type": "gauge"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 10
      },
      "id": 121,
      "panels": [],
      "title": "Energy Overview",
      "type": "row"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "VictoriaMetrics"
      },
      "description": "",
      "gridPos": {
        "h": 18,
        "w": 11,
        "x": 0,
        "y": 11
      },
      "id": 113,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "const dataBull = []\nconst dataCenter = []\nconst dataOuter = []\n\nlet totalHPkWh = Number(0)\nlet totalHCkWh = Number(0)\nlet totalHPCost = Number(0)\nlet totalHCCost = Number(0)\n\nconst barData = {\n  HPJB: { color: '#6495ED', cost: 0.1609 },\n  HPJW: { color: '#B0C4DE', cost: 0.1894 },\n  HPJR: { color: '#B22222', cost: 0.7564 },\n  HCJB: { color: '#87CEFA', cost: 0.1296 },\n  HCJW: { color: '#F8F8FF', cost: 0.1486 },\n  HCJR: { color: '#F08080', cost: 0.1568 }\n}\n\ncontext.panel.data.series.map((s) => {\n\n  if (s.fields.length > 0)\n    value = s.fields.find((f) => f.type === 'number').values[0];\n  else\n    value = 0\n  value = Number(value).toFixed(2)\n\n  switch (s.refId) {\n    case 'TotalHP':\n      //console.log(s)\n      fieldName = s.refId.replace('Total', '')\n      valueCost = Number(value * 0.20).toFixed(2)\n      //dataBull.push({ value: value, name: fieldName, cost: valueCost, color: barData['HPJB'].color });\n      break;\n\n    case 'TotalHC':\n      //console.log(s)\n      fieldName = s.refId.replace('Total', '')\n      valueCost = Number(value * 0.15).toFixed(2)\n      //dataBull.push({ value: value, name: fieldName, cost: valueCost, color: barData['HCJB'].color });\n      break;\n\n    case 'HPJB':\n    case 'HCJB':\n    case 'HPJW':\n    case 'HCJW':\n    case 'HPJR':\n    case 'HCJR':\n      //console.log(s)\n      valueCost = Number(value * barData[s.refId].cost).toFixed(2)\n      dataCenter.push({ value: value, name: s.refId, cost: valueCost, color: barData[s.refId].color });\n      if (s.refId.includes('HP')) {\n        totalHPkWh += Number(value)\n        totalHPCost += Number(valueCost)\n      } else {\n        totalHCkWh += Number(value)\n        totalHCCost += Number(valueCost)\n      }\n      break;\n\n    case 'Car':\n    case 'Water':\n    case 'Heaters':\n    case 'Plugs':\n      device = s.fields[0].config.displayNameFromDS\n    case 'Others':\n      if (s.fields[0].name.includes('OnOff') || device.includes('OnOff') ) {\n        device = s.fields[0].config.displayNameFromDS.replace(/P(.*)~(.*)~OnOff/, '$2')\n        cost = 0.2062\n      } else {\n        switch (s.refId) {\n          case 'Car':\n          case 'Water':\n            cost = 0.134\n            break\n          case 'Others':\n            cost = 0.17\n            break\n        }\n        device = s.refId\n      }\n      valueCost = Number(value * cost).toFixed(2)\n      dataOuter.push({ value: value, name: device, cost: valueCost });\n      break;\n  }\n\n});\n\ndataBull.push({ value: Number(totalHPkWh).toFixed(2), name: 'HP', cost: Number(totalHPCost).toFixed(2), color: barData['HPJB'].color });\ndataBull.push({ value: Number(totalHCkWh).toFixed(2), name: 'HC', cost: Number(totalHCCost).toFixed(2), color: barData['HCJB'].color });\n// console.log(dataBull);\n\nreturn {\n  /*tooltip: {\n    trigger: 'item',\n    //formatter: '{b}: {c} kWh ({d}%)'\n    formatter: function (params) {\n      return `${params.name.replace('Total', '')}<br />\n              ${params.data.value} kWh (${params.percent}%)<br />\n              ${params.data.cost} €`;\n    }\n  },\n  legend: {\n    top: \"0%\",\n    left: \"right\",    \n  },*/\n  series: [\n    {\n      id: 'edf',\n      name: 'HC/HP',\n      type: 'pie',\n      selectedMode: 'single',\n      radius: ['0%', '20%'],\n      color: ['#6495ED', '#87CEFA'],\n      /*itemStyle: {\n        borderRadius: 10,\n        borderColor: \"#fff\",\n        borderWidth: 2,\n      },*/\n      label: {\n        position: 'inner',\n        //formatter: '{b}\\n{c} kWh\\n{d}%',\n        formatter: function (params) {\n          let timelineTotal = context.grafana.replaceVariables(\"${donutValueAs}\");\n          switch (timelineTotal) {\n            case 'percent':\n              return `${params.name.replace('Total', '')}\\n${params.percent}%`;\n            case 'kWh':\n              return `${params.name.replace('Total', '')}\\n${params.data.value} kWh`;\n            case '€':\n              return `${params.name.replace('Total', '')}\\n${params.data.cost} €`;\n          }\n        },\n        fontSize: 16,\n        // color: \"lightgray\"\n        fontWeight: \"bold\"\n      },\n      labelLine: {\n        show: false\n      },\n      emphasis: {\n        label: {\n          show: true,\n          fontSize: \"40\",\n          fontWeight: \"bold\",\n          formatter: function (params) {\n            return `${params.data.value} kWh\\n${params.percent}%\\n${params.data.cost} €`;\n          },\n        },\n      },\n      data: dataBull\n    },\n    {\n      id: 'tempo',\n      name: 'EDF',\n      type: 'pie',\n      selectedMode: 'single',\n      radius: ['30%', '45%'],\n      color: [\n        barData['HPJB'].color,\n        barData['HPJW'].color,\n        barData['HPJR'].color,\n        barData['HCJB'].color,\n        barData['HCJW'].color,\n        barData['HCJR'].color\n      ],\n      /*itemStyle: {\n        borderRadius: 10,\n        borderColor: \"#fff\",\n        borderWidth: 2,\n      },*/\n      label: {\n        position: 'inner',\n        //formatter: '{b}\\n{c} kWh\\n{d}%',\n        formatter: function (params) {\n          let timelineTotal = context.grafana.replaceVariables(\"${donutValueAs}\");\n          switch (timelineTotal) {\n            case 'percent':\n              return `${params.name}\\n${params.percent}%`;\n            case 'kWh':\n              return `${params.name}\\n${params.data.value} kWh`;\n            case '€':\n              return `${params.name}\\n${params.data.cost} €`;\n          }\n        },\n        fontSize: 16,\n        fontWeight: \"bold\"\n      },\n      labelLine: {\n        show: false\n      },\n      emphasis: {\n        label: {\n          show: true,\n          fontSize: \"40\",\n          fontWeight: \"bold\",\n          // color: \"black\",\n          formatter: function (params) {\n            return `${params.data.value} kWh\\n${params.percent}%\\n${params.data.cost} €`;\n          }\n        },\n      },\n      data: dataCenter\n    },\n    {\n      id: 'clamps',\n      name: 'Clamps',\n      type: 'pie',\n      radius: ['55%', '66%'],\n      labelLine: {\n        length: 30\n      },\n      label: {\n        /*formatter: [\n          '{b|{b}：}{c|{c} kWh}',\n          '{per|{d}%}'\n        ].join('\\n'),*/\n        formatter: function (params) {\n          return `{name|${params.name} - ${params.percent}%}\\n{values|${params.data.value} kWh / ${params.data.cost} €}`;\n        },\n        //'{hr|}\\n  {b|{b}：}{c|{c} kWh}\\n{per|{d}%}',\n        fontSize: 12,\n        backgroundColor: '#F6F8FC',\n        borderColor: '#8C8D8E',\n        borderWidth: 1,\n        borderRadius: 4,\n        rich: {\n          name: {\n            align: 'center',\n            color: '#4C5058',\n            //fontSize: 12,\n            fontWeight: 'bold',\n            lineHeight: 15\n          },\n          values: {\n            align: 'center',\n            color: '#9C5058',\n            //fontSize: 12,\n            fontWeight: 'bold',\n            lineHeight: 15\n          }\n        }\n      },\n      emphasis: {\n        label: {\n          show: true,\n          fontSize: \"30\",\n          fontWeight: \"bold\",\n        }\n      },\n      data: dataOuter\n    }\n  ]\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "height": 400,
          "name": "default"
        },
        "visualEditor": {
          "code": "console.log(context);\nreturn {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "6.1.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "(sensors_teleinfo_BBRHPJB{db=\"sensors\",location=\"main\"} - sensors_teleinfo_BBRHPJB{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
          "hide": false,
          "instant": true,
          "legendFormat": "HPJB",
          "range": false,
          "refId": "HPJB"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "(sensors_teleinfo_BBRHPJW{db=\"sensors\",location=\"main\"} - sensors_teleinfo_BBRHPJW{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
          "hide": false,
          "instant": true,
          "legendFormat": "HPJW",
          "range": false,
          "refId": "HPJW"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "(sensors_teleinfo_BBRHPJR{db=\"sensors\",location=\"main\"} - sensors_teleinfo_BBRHPJR{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
          "hide": false,
          "instant": true,
          "legendFormat": "HPJR",
          "range": false,
          "refId": "HPJR"
        },
        {
          "datasource": {
            "name": "Expression",
            "type": "__expr__",
            "uid": "__expr__"
          },
          "expression": "$HPJB + $HPJW + $HPJR",
          "hide": false,
          "refId": "TotalHP",
          "type": "math"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "(sensors_teleinfo_BBRHCJB{db=\"sensors\",location=\"main\"} - sensors_teleinfo_BBRHCJB{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
          "hide": false,
          "instant": true,
          "legendFormat": "HCJB",
          "range": false,
          "refId": "HCJB"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "(sensors_teleinfo_BBRHCJW{db=\"sensors\",location=\"main\"} - sensors_teleinfo_BBRHCJW{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
          "hide": false,
          "instant": true,
          "legendFormat": "HCJW",
          "range": false,
          "refId": "HCJW"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "(sensors_teleinfo_BBRHCJR{db=\"sensors\",location=\"main\"} - sensors_teleinfo_BBRHCJR{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
          "hide": false,
          "instant": true,
          "legendFormat": "HCJR",
          "range": false,
          "refId": "HCJR"
        },
        {
          "datasource": {
            "name": "Expression",
            "type": "__expr__",
            "uid": "__expr__"
          },
          "expression": "$HCJB + $HCJW + $HCJR",
          "hide": false,
          "refId": "TotalHC",
          "type": "math"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg(sensors_zigbee_energy_l1{location=\"C01~Garage~PowerMeter\"} - (sensors_zigbee_energy_l1{location=\"C01~Garage~PowerMeter\"} offset $nbDays))",
          "hide": false,
          "instant": true,
          "legendFormat": "Car",
          "range": false,
          "refId": "Car"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg(sensors_zigbee_energy_l2{location=\"C01~Garage~PowerMeter\"} - (sensors_zigbee_energy_l2{location=\"C01~Garage~PowerMeter\"} offset $nbDays))",
          "hide": false,
          "instant": true,
          "legendFormat": "Water",
          "range": false,
          "refId": "Water"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg(sensors_zigbee_energy_l3{location=\"C01~Garage~PowerMeter\"} - (sensors_zigbee_energy_l3{location=\"C01~Garage~PowerMeter\"} offset $nbDays))",
          "hide": false,
          "instant": true,
          "legendFormat": "Heaters",
          "range": false,
          "refId": "Heaters"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg(sensors_zigbee_energy_l2{location=\"C02~Garage~PowerMeter\"} - (sensors_zigbee_energy_l2{location=\"C02~Garage~PowerMeter\"} offset $nbDays))",
          "hide": false,
          "instant": true,
          "legendFormat": "VMC",
          "range": false,
          "refId": "VMC"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg(sensors_zigbee_energy_l1{location=\"C01~Garage~PowerMeter\"} - (sensors_zigbee_energy_l1{location=\"C01~Garage~PowerMeter\"} offset $nbDays))\n+\navg(sensors_zigbee_energy_l2{location=\"C01~Garage~PowerMeter\"} - (sensors_zigbee_energy_l2{location=\"C01~Garage~PowerMeter\"} offset $nbDays))\n+\navg(sensors_zigbee_energy_l3{location=\"C01~Garage~PowerMeter\"} - (sensors_zigbee_energy_l3{location=\"C01~Garage~PowerMeter\"} offset $nbDays))",
          "hide": true,
          "instant": true,
          "legendFormat": "TotalClamps",
          "range": false,
          "refId": "TotalClamps"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "sensors_zigbee_energy{location=~\"P.*\"} - (sensors_zigbee_energy{location=~\"P.*\"} offset $nbDays)",
          "hide": false,
          "instant": true,
          "legendFormat": "{{location}}",
          "range": false,
          "refId": "Plugs"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "sum(sensors_zigbee_energy{location=~\"P.*\"} - (sensors_zigbee_energy{location=~\"P.*\"} offset $nbDays))",
          "hide": true,
          "instant": true,
          "legendFormat": "TotalPlugs",
          "range": false,
          "refId": "TotalPlugs"
        },
        {
          "datasource": {
            "name": "Expression",
            "type": "__expr__",
            "uid": "__expr__"
          },
          "expression": "$TotalHP + $TotalHC - $TotalClamps - $TotalPlugs",
          "hide": false,
          "refId": "Others",
          "type": "math"
        }
      ],
      "title": "$nbDays days ($donutValueAs)",
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "VictoriaMetrics"
      },
      "description": "Energy Consumed daily (kWh)",
      "gridPos": {
        "h": 11,
        "w": 13,
        "x": 11,
        "y": 11
      },
      "id": 106,
      "interval": "${timelineRange}",
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "const barData = {\n  HPJB: { color: '#6495ED', cost: 0.1609 },\n  HPJW: { color: '#B0C4DE', cost: 0.1894 },\n  HPJR: { color: '#B22222', cost: 0.7564 },\n  HCJB: { color: '#87CEFA', cost: 0.1296 },\n  HCJW: { color: '#F8F8FF', cost: 0.1486 },\n  HCJR: { color: '#F08080', cost: 0.1568 }\n}\n\nvar tooltipCallback = (args) => {\n  // console.log(args)\n  let date = new Date(parseInt(args.data[0]))\n  return date.toDateString().slice(0, 10) + '<br />' + args.seriesName + ' ' + Number(args.data[1] / 1000).toFixed(2) + ' kWh';\n}\n\nconst series = context.panel.data.series.map((s) => {\n  const name = s.refId.replace(\"Teleinfo-BBR\", \"\")\n\n  const sData = s.fields.find((f) => f.type === 'number').values;\n  const sTime = s.fields.find((f) => f.type === 'time').values;\n  const color = barData[name].color;\n\n  return {\n    name: name,\n    type: 'bar',\n    stack: true,\n    showSymbol: false,\n    areaStyle: {\n      opacity: 0.1,\n    },\n    lineStyle: {\n      width: 1,\n    },\n    data: sData.map((d, i) => [sTime[i], d.toFixed(2)]),\n    color: color,\n    tooltip: {\n      trigger: 'item',\n      axisPointer: {\n        type: 'shadow',\n      },\n      formatter: tooltipCallback\n    }\n  };\n});\n\n// top stack bar label\nseries[series.length - 1].label = {\n  normal: {\n    show: true,\n    position: 'top',\n    color: \"white\",\n    fontSize: 12,\n    rotate: 50,\n    formatter: (params) => {\n      let timelineTotal = context.grafana.replaceVariables(\"${timelineTotal}\");\n      let display = \"\"\n      switch (timelineTotal) {\n        case 'kWh':\n          let total = 0;\n          series.forEach(serie => {\n            // console.log(serie.data[params.dataIndex])\n            total += parseInt(serie.data[params.dataIndex][1]);\n          })\n          display = \"                 \" + (total / 1000).toFixed(1) + \" kWh\"\n          break;\n        case 'base':\n          let totalBase = 0;\n          series.forEach(serie => {\n            // console.log(serie.data[params.dataIndex])\n            totalBase += parseInt(serie.data[params.dataIndex][1]);\n          })\n          let costTotal = (totalBase * 0.25 / 1000).toFixed(1)\n          display = \"                 \" + costTotal + \" €\";\n          break\n        case 'blue':\n          let totalHC = 0;\n          let totalHP = 0;\n          series.forEach(serie => {\n            // console.log(serie.data[params.dataIndex])\n            if (serie.name.indexOf('HC') >= 0)\n              totalHC += parseInt(serie.data[params.dataIndex][1]);\n            else\n              totalHP += parseInt(serie.data[params.dataIndex][1]);\n          })\n          let costTotalBlue = ((totalHC * 0.22 / 1000) + (totalHP * 0.28 / 1000)).toFixed(1)\n          display = \"                 \" + costTotalBlue + \" €\";\n          break\n        case 'tempo':\n          let totalBBR = {};\n          series.forEach(serie => {\n            // console.log(serie.data[params.dataIndex])\n            totalBBR[serie.name] = parseInt(serie.data[params.dataIndex][1]);\n          })\n          let costTotalTempo = (\n            (totalBBR['HPJB'] * barData['HPJB'].cost / 1000)\n            + (totalBBR['HCJB'] * barData['HCJB'].cost / 1000)\n            + (totalBBR['HPJW'] * barData['HPJW'].cost / 1000)\n            + (totalBBR['HCJW'] * barData['HCJW'].cost / 1000)\n            + (totalBBR['HPJR'] * barData['HPJR'].cost / 1000)\n            + (totalBBR['HCJR'] * barData['HCJR'].cost / 1000)\n          ).toFixed(1)\n          display = \"                 \" + costTotalTempo + \" €\";\n          break\n      }\n      return display\n    }\n  }\n}\n\n/**\n * Enable Data Zoom by default\n */\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n/**\n * Update Time Range on Zoom\n */\ncontext.panel.chart.on('datazoom', function (params) {\n  // console.log(params)\n  const startValue = params.batch[0]?.startValue;\n  const endValue = params.batch[0]?.endValue;\n  context.grafana.locationService.partial({ from: startValue, to: endValue });\n});\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n  },\n  legend: {\n    left: '0',\n    bottom: '0',\n    data: context.panel.data.series.map((s) => s.refId.replace(\"Teleinfo-BBR\", \"\")),\n    textStyle: {\n      color: 'rgba(128, 128, 128, .9)',\n    },\n  },\n  toolbox: {\n    feature: {\n      dataZoom: {\n        yAxisIndex: 'none',\n        icon: {\n          zoom: 'path://',\n          back: 'path://',\n        },\n      },\n      saveAsImage: {},\n    }\n  },\n  xAxis: {\n    // type: 'time',\n    type: 'category',\n    axisLabel: {\n      rotate: 45,\n      // formatter: '{value} Wh'\n      formatter: function (d) {\n        // console.log(d)\n        let date = new Date(parseInt(d))\n        return date.toDateString().slice(0, 10) + \" - \" + date.getHours() + \"h\";\n      }\n    }\n  },\n  yAxis: {\n    type: 'value',\n    min: '0',\n    axisLabel: {\n      rotate: 0,\n      //formatter: '{value} Wh'\n      formatter: function (d) {\n        // console.log(d)\n        return \"\" + (d / 1000).toFixed(0) + \" kWh\";\n      }\n    }\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '2%',\n    bottom: 24,\n    containLabel: true,\n  },\n  series,\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "svg",
        "themeEditor": {
          "config": "{}",
          "height": 400,
          "name": "default"
        },
        "visualEditor": {
          "code": "console.log(context);\nreturn {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "6.1.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "expr": "((increase(sensors_teleinfo_BBRHPJB{location=\"main\",db=\"sensors\"}[${timelineRange}]) offset -${timelineRange}) offset -${timelineRange}) or vector(0)",
          "hide": false,
          "legendFormat": "Heures Creuses",
          "range": true,
          "refId": "Teleinfo-BBRHPJB"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "expr": "((increase(sensors_teleinfo_BBRHCJB{location=\"main\",db=\"sensors\"}[${timelineRange}]) offset -${timelineRange}) offset -${timelineRange}) or vector(0)",
          "hide": false,
          "legendFormat": "Heures Pleines",
          "range": true,
          "refId": "Teleinfo-BBRHCJB"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "expr": "((increase(sensors_teleinfo_BBRHPJW{location=\"main\",db=\"sensors\"}[${timelineRange}]) offset -${timelineRange}) offset -${timelineRange}) or vector(0)",
          "hide": false,
          "legendFormat": "Heures Creuses",
          "range": true,
          "refId": "Teleinfo-BBRHPJW"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "expr": "((increase(sensors_teleinfo_BBRHCJW{location=\"main\",db=\"sensors\"}[${timelineRange}]) offset -${timelineRange}) offset -${timelineRange}) or vector(0)",
          "hide": false,
          "legendFormat": "Heures Pleines",
          "range": true,
          "refId": "Teleinfo-BBRHCJW"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "expr": "((increase(sensors_teleinfo_BBRHPJR{location=\"main\",db=\"sensors\"}[${timelineRange}]) offset -${timelineRange}) offset -${timelineRange}) or vector(0)",
          "hide": false,
          "legendFormat": "Heures Creuses",
          "range": true,
          "refId": "Teleinfo-BBRHPJR"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "expr": "((increase(sensors_teleinfo_BBRHCJR{location=\"main\",db=\"sensors\"}[${timelineRange}]) offset -${timelineRange}) offset -${timelineRange}) or vector(0)",
          "hide": false,
          "legendFormat": "Heures Pleines",
          "range": true,
          "refId": "Teleinfo-BBRHCJR"
        }
      ],
      "title": "Total (${timelineTotal})",
      "transformations": [
        {
          "id": "filterByValue",
          "options": {
            "filters": [
              {
                "config": {
                  "id": "greater",
                  "options": {
                    "value": 90000000
                  }
                },
                "fieldName": "Total"
              }
            ],
            "match": "any",
            "type": "exclude"
          }
        }
      ],
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "VictoriaMetrics"
      },
      "description": "Clamps consumption (kWh)",
      "gridPos": {
        "h": 13,
        "w": 13,
        "x": 11,
        "y": 22
      },
      "id": 129,
      "interval": "${timelineRange}",
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "var tooltipCallback = (args) => {\n  // console.log(args)\n  let date = new Date(parseInt(args.data[0]))\n  return date.toDateString().slice(0, 10) + '<br />' + args.seriesName + ' ' + Number(args.data[1] / 1000).toFixed(2) + ' kWh';\n}\n\nconst series = context.panel.data.series.map((s) => {\n  const name = s.fields.find((f) => f.type === 'number').config.displayNameFromDS.replace(/P(.*)~(.*)~OnOff/, '$2')\n\n  const sData = s.fields.find((f) => f.type === 'number').values;\n  const sTime = s.fields.find((f) => f.type === 'time').values;\n  // const color = barData[name].color;\n\n  return {\n    name: name,\n    type: 'bar',\n    stack: true,\n    showSymbol: false,\n    symbolSize: 12,\n    areaStyle: {\n      opacity: 0.1,\n    },\n    lineStyle: {\n      width: 1,\n    },\n    // color: color,\n    tooltip: {\n      trigger: 'item',\n      axisPointer: {\n        type: 'shadow',\n      },\n      formatter: tooltipCallback\n    },\n    data: sData.map((d, i) => [sTime[i], d ? Number(d * 1000).toFixed(2) : 0]),\n  };\n});\n\n// top stack bar label\nseries[series.length - 1].label = {\n  normal: {\n    show: true,\n    position: 'top',\n    color: \"white\",\n    fontSize: 12,\n    rotate: 50,\n    formatter: (params) => {\n      let total = 0;\n\n      series.forEach(serie => {\n        serie.data.forEach(value => {\n          // Note to understand below:\n          // IF timestamps are matching\n          // THEN we have a value for the given bar to count\n          if (params.data[0] == value[0]) {\n            // console.log(serie.name + \" \" + value[0] + \"=\" + value[1])\n            total += parseInt(value[1])\n          }\n        })\n      })\n\n      return \"                 \" + (total / 1000).toFixed(1) + \" kWh\";\n    }\n  }\n}\n\nconst legend = context.panel.data.series.map((s) => {\n  const name = s.fields.find((f) => f.type === 'number').config.displayNameFromDS\n  const nameClean = name.replace(/P(.*)~(.*)~OnOff/, '$2')\n  return nameClean\n})\n\n/**\n * Enable Data Zoom by default\n */\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n/**\n * Update Time Range on Zoom\n */\ncontext.panel.chart.on('datazoom', function (params) {\n  // console.log(params)\n  const startValue = params.batch[0]?.startValue;\n  const endValue = params.batch[0]?.endValue;\n  context.grafana.locationService.partial({ from: startValue, to: endValue });\n});\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n  },\n  legend: {\n    left: '0',\n    bottom: '0',\n    data: legend,\n    textStyle: {\n      color: 'rgba(128, 128, 128, .9)',\n    },\n  },\n  toolbox: {\n    feature: {\n      dataZoom: {\n        yAxisIndex: 'none',\n        icon: {\n          zoom: 'path://',\n          back: 'path://',\n        },\n      },\n      saveAsImage: {},\n    }\n  },\n  xAxis: {\n    // type: 'time',\n    type: 'category',\n    axisLabel: {\n      rotate: 45,\n      // formatter: '{value} Wh'\n      formatter: function (d) {\n        // console.log(d)\n        let date = new Date(parseInt(d))\n        return date.toDateString().slice(0, 10) + \" - \" + date.getHours() + \"h\";\n      }\n    }\n  },\n  yAxis: {\n    type: 'value',\n    min: '0',\n    axisLabel: {\n      rotate: 0,\n      //formatter: '{value} Wh'\n      formatter: function (d) {\n        // console.log(d)\n        return \"\" + (d / 1000).toFixed(0) + \" kWh\";\n      }\n    }\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '2%',\n    bottom: 24,\n    containLabel: true,\n  },\n  series,\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "svg",
        "themeEditor": {
          "config": "{}",
          "height": 400,
          "name": "default"
        },
        "visualEditor": {
          "code": "console.log(context);\nreturn {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "6.1.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "expr": "(increase(sensors_zigbee_energy_l1{location=\"C01~Garage~PowerMeter\",db=\"sensors\"}[${timelineRange}]) offset -${timelineRange}) offset -${timelineRange}",
          "hide": false,
          "legendFormat": "1-CarCharging",
          "range": true,
          "refId": "1-CarCharging"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "expr": "(increase(sensors_zigbee_energy_l2{location=\"C01~Garage~PowerMeter\",db=\"sensors\"}[${timelineRange}]) offset -${timelineRange}) offset -${timelineRange}",
          "hide": false,
          "legendFormat": "2-WaterHeater",
          "range": true,
          "refId": "2-WaterHeater"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "expr": "(increase(sensors_zigbee_energy_l3{location=\"C01~Garage~PowerMeter\",db=\"sensors\"}[${timelineRange}]) offset -${timelineRange}) offset -${timelineRange}",
          "hide": false,
          "legendFormat": "3-Heaters",
          "range": true,
          "refId": "3-Heaters"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "expr": "(increase(sensors_zigbee_energy{location=~\"P.*\",db=\"sensors\"}[${timelineRange}]) offset -${timelineRange}) offset -${timelineRange}",
          "hide": false,
          "legendFormat": "{{location}}",
          "range": true,
          "refId": "Plugs"
        }
      ],
      "title": "Clamps (kWh)",
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "VictoriaMetrics"
      },
      "description": "Costs computed with Low/High hours energy prices",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "Eu"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 3,
        "x": 0,
        "y": 29
      },
      "id": 123,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "value_and_name",
        "wideLayout": true
      },
      "pluginVersion": "10.4.2",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg((((sensors_teleinfo_BBRHCJB{} @end() - (sensors_teleinfo_BBRHCJB{} @end() offset $day1)) / 1000) * $kWhBase)) \n+\navg((((sensors_teleinfo_BBRHPJB{} @end()- (sensors_teleinfo_BBRHPJB{} @end() offset $day1)) / 1000) * $kWhBase))\n+\navg((((sensors_teleinfo_BBRHCJW{} @end() - (sensors_teleinfo_BBRHCJW{} @end() offset $day1)) / 1000) * $kWhBase)) \n+\navg((((sensors_teleinfo_BBRHPJW{} @end()- (sensors_teleinfo_BBRHPJW{} @end() offset $day1)) / 1000) * $kWhBase))\n+\navg((((sensors_teleinfo_BBRHCJR{} @end() - (sensors_teleinfo_BBRHCJR{} @end() offset $day1)) / 1000) * $kWhBase)) \n+\navg((((sensors_teleinfo_BBRHPJR{} @end()- (sensors_teleinfo_BBRHPJR{} @end() offset $day1)) / 1000) * $kWhBase))",
          "hide": false,
          "instant": false,
          "interval": "",
          "legendFormat": "$day1",
          "range": true,
          "refId": "1 day"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg((((sensors_teleinfo_BBRHCJB{} @end() - (sensors_teleinfo_BBRHCJB{} @end() offset $day7)) / 1000) * $kWhBase)) \n+\navg((((sensors_teleinfo_BBRHPJB{} @end()- (sensors_teleinfo_BBRHPJB{} @end() offset $day7)) / 1000) * $kWhBase))\n+\navg((((sensors_teleinfo_BBRHCJW{} @end() - (sensors_teleinfo_BBRHCJW{} @end() offset $day7)) / 1000) * $kWhBase)) \n+\navg((((sensors_teleinfo_BBRHPJW{} @end()- (sensors_teleinfo_BBRHPJW{} @end() offset $day7)) / 1000) * $kWhBase))\n+\navg((((sensors_teleinfo_BBRHCJR{} @end() - (sensors_teleinfo_BBRHCJR{} @end() offset $day7)) / 1000) * $kWhBase)) \n+\navg((((sensors_teleinfo_BBRHPJR{} @end()- (sensors_teleinfo_BBRHPJR{} @end() offset $day7)) / 1000) * $kWhBase))",
          "hide": true,
          "instant": false,
          "interval": "",
          "legendFormat": "$day7",
          "range": true,
          "refId": "7 days"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg((((sensors_teleinfo_BBRHCJB{} @end() - (sensors_teleinfo_BBRHCJB{} @end() offset $day30)) / 1000) * $kWhBase)) \n+\navg((((sensors_teleinfo_BBRHPJB{} @end()- (sensors_teleinfo_BBRHPJB{} @end() offset $day30)) / 1000) * $kWhBase))\n+\navg((((sensors_teleinfo_BBRHCJW{} @end() - (sensors_teleinfo_BBRHCJW{} @end() offset $day30)) / 1000) * $kWhBase)) \n+\navg((((sensors_teleinfo_BBRHPJW{} @end()- (sensors_teleinfo_BBRHPJW{} @end() offset $day30)) / 1000) * $kWhBase))\n+\navg((((sensors_teleinfo_BBRHCJR{} @end() - (sensors_teleinfo_BBRHCJR{} @end() offset $day30)) / 1000) * $kWhBase)) \n+\navg((((sensors_teleinfo_BBRHPJR{} @end()- (sensors_teleinfo_BBRHPJR{} @end() offset $day30)) / 1000) * $kWhBase))",
          "hide": false,
          "instant": false,
          "interval": "",
          "legendFormat": "$day30",
          "range": true,
          "refId": "30d"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg((((sensors_teleinfo_BBRHCJB{} @end() - (sensors_teleinfo_HCHC{} @end() offset $day365)) / 1000) * $kWhBase)) \n+\navg((((sensors_teleinfo_BBRHPJB{} @end()- (sensors_teleinfo_HCHP{} @end() offset $day365)) / 1000) * $kWhBase))\n+\navg((((sensors_teleinfo_BBRHCJW{} @end() - (sensors_teleinfo_BBRHCJW{} @end() offset $day365)) / 1000) * $kWhBase)) \n+\navg((((sensors_teleinfo_BBRHPJW{} @end()- (sensors_teleinfo_BBRHPJW{} @end() offset $day365)) / 1000) * $kWhBase))\n+\navg((((sensors_teleinfo_BBRHCJR{} @end() - (sensors_teleinfo_BBRHCJR{} @end() offset $day365)) / 1000) * $kWhBase)) \n+\navg((((sensors_teleinfo_BBRHPJR{} @end()- (sensors_teleinfo_BBRHPJR{} @end() offset $day365)) / 1000) * $kWhBase))",
          "hide": false,
          "instant": false,
          "interval": "",
          "legendFormat": "$day365",
          "range": true,
          "refId": "365 days"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg((((sensors_teleinfo_BBRHCJB{} @end() - (sensors_teleinfo_BBRHCJB{} @ 1672552800)) / 1000) * $kWhBase)) \n+\navg((((sensors_teleinfo_BBRHPJB{} @end()- (sensors_teleinfo_BBRHPJB{} @ 1672552800)) / 1000) * $kWhBase))\n+\navg((((sensors_teleinfo_BBRHCJW{} @end() - (sensors_teleinfo_BBRHCJW{} @ 1672552800)) / 1000) * $kWhBase)) \n+\navg((((sensors_teleinfo_BBRHPJW{} @end()- (sensors_teleinfo_BBRHPJW{} @ 1672552800)) / 1000) * $kWhBase))\n+\navg((((sensors_teleinfo_BBRHCJR{} @end() - (sensors_teleinfo_BBRHCJR{} @ 1672552800)) / 1000) * $kWhBase)) \n+\navg((((sensors_teleinfo_BBRHPJR{} @end()- (sensors_teleinfo_BBRHPJR{} @ 1672552800)) / 1000) * $kWhBase))",
          "hide": false,
          "instant": false,
          "interval": "",
          "legendFormat": "2023",
          "range": true,
          "refId": "2023"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg((((sensors_teleinfo_BBRHCJB{} @end() - (sensors_teleinfo_BBRHCJB{} @ 1704067200)) / 1000) * $kWhBase)) \n+\navg((((sensors_teleinfo_BBRHPJB{} @end()- (sensors_teleinfo_BBRHPJB{} @ 1704067200)) / 1000) * $kWhBase))\n+\navg((((sensors_teleinfo_BBRHCJW{} @end() - (sensors_teleinfo_BBRHCJW{} @ 1704067200)) / 1000) * $kWhBase)) \n+\navg((((sensors_teleinfo_BBRHPJW{} @end()- (sensors_teleinfo_BBRHPJW{} @ 1704067200)) / 1000) * $kWhBase))\n+\navg((((sensors_teleinfo_BBRHCJR{} @end() - (sensors_teleinfo_BBRHCJR{} @ 1704067200)) / 1000) * $kWhBase)) \n+\navg((((sensors_teleinfo_BBRHPJR{} @end()- (sensors_teleinfo_BBRHPJR{} @ 1704067200)) / 1000) * $kWhBase))",
          "hide": false,
          "instant": false,
          "interval": "",
          "legendFormat": "2024",
          "range": true,
          "refId": "2024"
        }
      ],
      "title": "Cost (€) - Base",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "VictoriaMetrics"
      },
      "description": "Costs computed with Low/High hours energy prices",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "Eu"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 3,
        "x": 3,
        "y": 29
      },
      "id": 122,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "value_and_name",
        "wideLayout": true
      },
      "pluginVersion": "10.4.2",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg((((sensors_teleinfo_BBRHCJB{} @end() - (sensors_teleinfo_BBRHCJB{} @end() offset $day1)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJB{} @end()- (sensors_teleinfo_BBRHPJB{} @end() offset $day1)) / 1000) * $kWhHP))\n+\navg((((sensors_teleinfo_BBRHCJW{} @end() - (sensors_teleinfo_BBRHCJW{} @end() offset $day1)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJW{} @end()- (sensors_teleinfo_BBRHPJW{} @end() offset $day1)) / 1000) * $kWhHP))\n+\navg((((sensors_teleinfo_BBRHCJR{} @end() - (sensors_teleinfo_BBRHCJR{} @end() offset $day1)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJR{} @end()- (sensors_teleinfo_BBRHPJR{} @end() offset $day1)) / 1000) * $kWhHP))",
          "hide": false,
          "instant": false,
          "interval": "",
          "legendFormat": "$day1",
          "range": true,
          "refId": "1 day"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg((((sensors_teleinfo_BBRHCJB{} @end() - (sensors_teleinfo_BBRHCJB{} @end() offset $day7)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJB{} @end()- (sensors_teleinfo_BBRHPJB{} @end() offset $day7)) / 1000) * $kWhHP))\n+\navg((((sensors_teleinfo_BBRHCJW{} @end() - (sensors_teleinfo_BBRHCJW{} @end() offset $day7)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJW{} @end()- (sensors_teleinfo_BBRHPJW{} @end() offset $day7)) / 1000) * $kWhHP))\n+\navg((((sensors_teleinfo_BBRHCJR{} @end() - (sensors_teleinfo_BBRHCJR{} @end() offset $day7)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJR{} @end()- (sensors_teleinfo_BBRHPJR{} @end() offset $day7)) / 1000) * $kWhHP))",
          "hide": true,
          "instant": false,
          "interval": "",
          "legendFormat": "$day7",
          "range": true,
          "refId": "7 days"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg((((sensors_teleinfo_BBRHCJB{} @end() - (sensors_teleinfo_BBRHCJB{} @end() offset $day30)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJB{} @end()- (sensors_teleinfo_BBRHPJB{} @end() offset $day30)) / 1000) * $kWhHP))\n+\navg((((sensors_teleinfo_BBRHCJW{} @end() - (sensors_teleinfo_BBRHCJW{} @end() offset $day30)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJW{} @end()- (sensors_teleinfo_BBRHPJW{} @end() offset $day30)) / 1000) * $kWhHP))\n+\navg((((sensors_teleinfo_BBRHCJR{} @end() - (sensors_teleinfo_BBRHCJR{} @end() offset $day30)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJR{} @end()- (sensors_teleinfo_BBRHPJR{} @end() offset $day30)) / 1000) * $kWhHP))",
          "hide": false,
          "instant": false,
          "interval": "",
          "legendFormat": "$day30",
          "range": true,
          "refId": "30d"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg((((sensors_teleinfo_BBRHCJB{} @end() - (sensors_teleinfo_BBRHCJB{} @end() offset $day60)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJB{} @end()- (sensors_teleinfo_BBRHPJB{} @end() offset $day60)) / 1000) * $kWhHP))\n+\navg((((sensors_teleinfo_BBRHCJW{} @end() - (sensors_teleinfo_BBRHCJW{} @end() offset $day60)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJW{} @end()- (sensors_teleinfo_BBRHPJW{} @end() offset $day60)) / 1000) * $kWhHP))\n+\navg((((sensors_teleinfo_BBRHCJR{} @end() - (sensors_teleinfo_BBRHCJR{} @end() offset $day60)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJR{} @end()- (sensors_teleinfo_BBRHPJR{} @end() offset $day60)) / 1000) * $kWhHP))",
          "hide": true,
          "instant": false,
          "interval": "",
          "legendFormat": "$day60",
          "range": true,
          "refId": "60d"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg((((sensors_teleinfo_BBRHCJB{} @end() - (sensors_teleinfo_HCHC{} @end() offset $day365)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJB{} @end()- (sensors_teleinfo_HCHP{} @end() offset $day365)) / 1000) * $kWhHP))\n+\navg((((sensors_teleinfo_BBRHCJW{} @end() - (sensors_teleinfo_BBRHCJW{} @end() offset $day365)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJW{} @end()- (sensors_teleinfo_BBRHPJW{} @end() offset $day365)) / 1000) * $kWhHP))\n+\navg((((sensors_teleinfo_BBRHCJR{} @end() - (sensors_teleinfo_BBRHCJR{} @end() offset $day365)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJR{} @end()- (sensors_teleinfo_BBRHPJR{} @end() offset $day365)) / 1000) * $kWhHP))",
          "hide": false,
          "instant": false,
          "interval": "",
          "legendFormat": "$day365",
          "range": true,
          "refId": "365 days"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg((((sensors_teleinfo_BBRHCJB{} @end() - (sensors_teleinfo_BBRHCJB{} @ 1672552800)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJB{} @end()- (sensors_teleinfo_BBRHPJB{} @ 1672552800)) / 1000) * $kWhHP))\n+\navg((((sensors_teleinfo_BBRHCJW{} @end() - (sensors_teleinfo_BBRHCJW{} @ 1672552800)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJW{} @end()- (sensors_teleinfo_BBRHPJW{} @ 1672552800)) / 1000) * $kWhHP))\n+\navg((((sensors_teleinfo_BBRHCJR{} @end() - (sensors_teleinfo_BBRHCJR{} @ 1672552800)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJR{} @end()- (sensors_teleinfo_BBRHPJR{} @ 1672552800)) / 1000) * $kWhHP))",
          "hide": false,
          "instant": false,
          "interval": "",
          "legendFormat": "2023",
          "range": true,
          "refId": "2023"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg((((sensors_teleinfo_BBRHCJB{} @end() - (sensors_teleinfo_BBRHCJB{} @ 1704067200)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJB{} @end()- (sensors_teleinfo_BBRHPJB{} @ 1704067200)) / 1000) * $kWhHP))\n+\navg((((sensors_teleinfo_BBRHCJW{} @end() - (sensors_teleinfo_BBRHCJW{} @ 1704067200)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJW{} @end()- (sensors_teleinfo_BBRHPJW{} @ 1704067200)) / 1000) * $kWhHP))\n+\navg((((sensors_teleinfo_BBRHCJR{} @end() - (sensors_teleinfo_BBRHCJR{} @ 1704067200)) / 1000) * $kWhHC)) \n+\navg((((sensors_teleinfo_BBRHPJR{} @end()- (sensors_teleinfo_BBRHPJR{} @ 1704067200)) / 1000) * $kWhHP))",
          "hide": false,
          "instant": false,
          "interval": "",
          "legendFormat": "2024",
          "range": true,
          "refId": "2024"
        }
      ],
      "title": "Cost (€) - HC/HP",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "VictoriaMetrics"
      },
      "description": "Costs computed with Low/High hours energy prices",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "Eu"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 3,
        "x": 6,
        "y": 29
      },
      "id": 110,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "value_and_name",
        "wideLayout": true
      },
      "pluginVersion": "10.4.2",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg((((sensors_teleinfo_BBRHCJB{} @end() - (sensors_teleinfo_BBRHCJB{} @end() offset $day1)) / 1000) * $kWhTBHC)) \n+\navg((((sensors_teleinfo_BBRHPJB{} @end()- (sensors_teleinfo_BBRHPJB{} @end() offset $day1)) / 1000) * $kWhTBHP))\n+\navg((((sensors_teleinfo_BBRHCJW{} @end() - (sensors_teleinfo_BBRHCJW{} @end() offset $day1)) / 1000) * $kWhTWHC)) \n+\navg((((sensors_teleinfo_BBRHPJW{} @end()- (sensors_teleinfo_BBRHPJW{} @end() offset $day1)) / 1000) * $kWhTWHP))\n+\navg((((sensors_teleinfo_BBRHCJR{} @end() - (sensors_teleinfo_BBRHCJR{} @end() offset $day1)) / 1000) * $kWhTRHC)) \n+\navg((((sensors_teleinfo_BBRHPJR{} @end()- (sensors_teleinfo_BBRHPJR{} @end() offset $day1)) / 1000) * $kWhTRHP))",
          "hide": false,
          "instant": false,
          "interval": "",
          "legendFormat": "$day1",
          "range": true,
          "refId": "1 day"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg((((sensors_teleinfo_BBRHCJB{} @end() - (sensors_teleinfo_BBRHCJB{} @end() offset $day7)) / 1000) * $kWhTBHC)) \n+\navg((((sensors_teleinfo_BBRHPJB{} @end()- (sensors_teleinfo_BBRHPJB{} @end() offset $day7)) / 1000) * $kWhTBHP))\n+\navg((((sensors_teleinfo_BBRHCJW{} @end() - (sensors_teleinfo_BBRHCJW{} @end() offset $day7)) / 1000) * $kWhTWHC)) \n+\navg((((sensors_teleinfo_BBRHPJW{} @end()- (sensors_teleinfo_BBRHPJW{} @end() offset $day7)) / 1000) * $kWhTWHP))\n+\navg((((sensors_teleinfo_BBRHCJR{} @end() - (sensors_teleinfo_BBRHCJR{} @end() offset $day7)) / 1000) * $kWhTRHC)) \n+\navg((((sensors_teleinfo_BBRHPJR{} @end()- (sensors_teleinfo_BBRHPJR{} @end() offset $day7)) / 1000) * $kWhTRHP))",
          "hide": true,
          "instant": false,
          "interval": "",
          "legendFormat": "$day7",
          "range": true,
          "refId": "7 days"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg((((sensors_teleinfo_BBRHCJB{} @end() - (sensors_teleinfo_BBRHCJB{} @end() offset $day30)) / 1000) * $kWhTBHC)) \n+\navg((((sensors_teleinfo_BBRHPJB{} @end()- (sensors_teleinfo_BBRHPJB{} @end() offset $day30)) / 1000) * $kWhTBHP))\n+\navg((((sensors_teleinfo_BBRHCJW{} @end() - (sensors_teleinfo_BBRHCJW{} @end() offset $day30)) / 1000) * $kWhTWHC)) \n+\navg((((sensors_teleinfo_BBRHPJW{} @end()- (sensors_teleinfo_BBRHPJW{} @end() offset $day30)) / 1000) * $kWhTWHP))\n+\navg((((sensors_teleinfo_BBRHCJR{} @end() - (sensors_teleinfo_BBRHCJR{} @end() offset $day30)) / 1000) * $kWhTRHC)) \n+\navg((((sensors_teleinfo_BBRHPJR{} @end()- (sensors_teleinfo_BBRHPJR{} @end() offset $day30)) / 1000) * $kWhTRHP))",
          "hide": false,
          "instant": false,
          "interval": "",
          "legendFormat": "$day30",
          "range": true,
          "refId": "30d"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg((((sensors_teleinfo_BBRHCJB{} @end() - (sensors_teleinfo_HCHC{} @end() offset $day365)) / 1000) * $kWhTBHC)) \n+\navg((((sensors_teleinfo_BBRHPJB{} @end()- (sensors_teleinfo_HCHP{} @end() offset $day365)) / 1000) * $kWhTBHP))\n+\navg((((sensors_teleinfo_BBRHCJW{} @end() - (sensors_teleinfo_BBRHCJW{} @end() offset $day365)) / 1000) * $kWhTWHC)) \n+\navg((((sensors_teleinfo_BBRHPJW{} @end()- (sensors_teleinfo_BBRHPJW{} @end() offset $day365)) / 1000) * $kWhTWHP))\n+\navg((((sensors_teleinfo_BBRHCJR{} @end() - (sensors_teleinfo_BBRHCJR{} @end() offset $day365)) / 1000) * $kWhTRHC)) \n+\navg((((sensors_teleinfo_BBRHPJR{} @end()- (sensors_teleinfo_BBRHPJR{} @end() offset $day365)) / 1000) * $kWhTRHP))",
          "hide": false,
          "instant": false,
          "interval": "",
          "legendFormat": "$day365",
          "range": true,
          "refId": "365 days"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg((((sensors_teleinfo_BBRHCJB{} @end() - (sensors_teleinfo_BBRHCJB{} @ 1672552800)) / 1000) * $kWhTBHC)) \n+\navg((((sensors_teleinfo_BBRHPJB{} @end()- (sensors_teleinfo_BBRHPJB{} @ 1672552800)) / 1000) * $kWhTBHP))\n+\navg((((sensors_teleinfo_BBRHCJW{} @end() - (sensors_teleinfo_BBRHCJW{} @ 1672552800)) / 1000) * $kWhTWHC)) \n+\navg((((sensors_teleinfo_BBRHPJW{} @end()- (sensors_teleinfo_BBRHPJW{} @ 1672552800)) / 1000) * $kWhTWHP))\n+\navg((((sensors_teleinfo_BBRHCJR{} @end() - (sensors_teleinfo_BBRHCJR{} @ 1672552800)) / 1000) * $kWhTRHC)) \n+\navg((((sensors_teleinfo_BBRHPJR{} @end()- (sensors_teleinfo_BBRHPJR{} @ 1672552800)) / 1000) * $kWhTRHP))",
          "hide": false,
          "instant": false,
          "interval": "",
          "legendFormat": "2023",
          "range": true,
          "refId": "2023"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg((((sensors_teleinfo_BBRHCJB{} @end() - (sensors_teleinfo_BBRHCJB{} @ 1704067200)) / 1000) * $kWhTBHC)) \n+\navg((((sensors_teleinfo_BBRHPJB{} @end()- (sensors_teleinfo_BBRHPJB{} @ 1704067200)) / 1000) * $kWhTBHP))\n+\navg((((sensors_teleinfo_BBRHCJW{} @end() - (sensors_teleinfo_BBRHCJW{} @ 1704067200)) / 1000) * $kWhTWHC)) \n+\navg((((sensors_teleinfo_BBRHPJW{} @end()- (sensors_teleinfo_BBRHPJW{} @ 1704067200)) / 1000) * $kWhTWHP))\n+\navg((((sensors_teleinfo_BBRHCJR{} @end() - (sensors_teleinfo_BBRHCJR{} @ 1704067200)) / 1000) * $kWhTRHC)) \n+\navg((((sensors_teleinfo_BBRHPJR{} @end()- (sensors_teleinfo_BBRHPJR{} @ 1704067200)) / 1000) * $kWhTRHP))",
          "hide": false,
          "instant": false,
          "interval": "",
          "legendFormat": "2024",
          "range": true,
          "refId": "2024"
        }
      ],
      "title": "Cost (€) - Tempo",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "VictoriaMetrics"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 2,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "kwatth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 2,
        "x": 9,
        "y": 29
      },
      "id": 131,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "value_and_name",
        "wideLayout": true
      },
      "pluginVersion": "10.4.2",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "expr": "increase(sensors_zigbee_energy_produced_b{location=\"C03~Garage~PowerMeter\"}[$nbDays])",
          "hide": false,
          "instant": false,
          "legendFormat": "Produced",
          "range": true,
          "refId": "EProduced"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "expr": "increase(sensors_zigbee_energy_b{location=\"C03~Garage~PowerMeter\"}[$nbDays])",
          "hide": false,
          "instant": false,
          "legendFormat": "Clamp Conso",
          "range": true,
          "refId": "EConsummed"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "editorMode": "code",
          "expr": "increase(sensors_teleinfo_Wh_Total{location=\"main\"}[$nbDays])",
          "hide": true,
          "instant": false,
          "legendFormat": "TIC Conso",
          "range": true,
          "refId": "TConso"
        }
      ],
      "title": "Energy In/Out",
      "type": "stat"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 35
      },
      "id": 53,
      "panels": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "description": "Energy Consumed hourly (kWh)",
          "gridPos": {
            "h": 12,
            "w": 24,
            "x": 0,
            "y": 36
          },
          "id": 119,
          "interval": "1h",
          "options": {
            "baidu": {
              "callback": "bmapReady",
              "key": ""
            },
            "editor": {
              "format": "auto",
              "height": 600
            },
            "editorMode": "code",
            "gaode": {
              "key": "",
              "plugin": "AMap.Scale,AMap.ToolBar"
            },
            "getOption": "const barData = {\n  HPJB: { color: '#6495ED', cost: 0.1609 },\n  HPJW: { color: '#B0C4DE', cost: 0.1894 },\n  HPJR: { color: '#B22222', cost: 0.7564 },\n  HCJB: { color: '#87CEFA', cost: 0.1296 },\n  HCJW: { color: '#F8F8FF', cost: 0.1486 },\n  HCJR: { color: '#F08080', cost: 0.1568 }\n}\n\nvar tooltipCallback = (args) => {\n  // console.log(args)\n  let date = new Date(parseInt(args.data[0]))\n  return date.toDateString().slice(0, 10) + '<br />' + args.seriesName + ' ' + Number(args.data[1] / 1000).toFixed(2) + ' kWh';\n}\n\nconst series = context.panel.data.series.map((s) => {\n  const name = s.refId.replace(\"Teleinfo-BBR\", \"\")\n\n  const sData = s.fields.find((f) => f.type === 'number').values;\n  const sTime = s.fields.find((f) => f.type === 'time').values;\n  const color = barData[name].color;\n\n  return {\n    name: name,\n    type: 'bar',\n    stack: true,\n    showSymbol: false,\n    areaStyle: {\n      opacity: 0.1,\n    },\n    lineStyle: {\n      width: 1,\n    },\n    data: sData.map((d, i) => [sTime[i], d.toFixed(2)]),\n    color: color,\n    tooltip: {\n      trigger: 'item',\n      axisPointer: {\n        type: 'shadow',\n      },\n      formatter: tooltipCallback\n    }\n  };\n});\n\n// top stack bar label\nseries[series.length - 1].label = {\n  normal: {\n    show: true,\n    position: 'top',\n    color: \"white\",\n    fontSize: 12,\n    rotate: 50,\n    formatter: (params) => {\n      let timelineTotal = context.grafana.replaceVariables(\"${timelineTotal}\");\n      let display = \"\"\n      switch (timelineTotal) {\n        case 'kWh':\n          let total = 0;\n          series.forEach(serie => {\n            // console.log(serie.data[params.dataIndex])\n            total += parseInt(serie.data[params.dataIndex][1]);\n          })\n          display = \"                 \" + (total / 1000).toFixed(1) + \" kWh\"\n          break;\n        case 'base':\n          let totalBase = 0;\n          series.forEach(serie => {\n            // console.log(serie.data[params.dataIndex])\n            totalBase += parseInt(serie.data[params.dataIndex][1]);\n          })\n          let costTotal = (totalBase * 0.25 / 1000).toFixed(1)\n          display = \"                 \" + costTotal + \" €\";\n          break\n        case 'blue':\n          let totalHC = 0;\n          let totalHP = 0;\n          series.forEach(serie => {\n            // console.log(serie.data[params.dataIndex])\n            if (serie.name.indexOf('HC') >= 0)\n              totalHC += parseInt(serie.data[params.dataIndex][1]);\n            else\n              totalHP += parseInt(serie.data[params.dataIndex][1]);\n          })\n          let costTotalBlue = ((totalHC * 0.22 / 1000) + (totalHP * 0.28 / 1000)).toFixed(1)\n          display = \"                 \" + costTotalBlue + \" €\";\n          break\n        case 'tempo':\n          let totalBBR = {};\n          series.forEach(serie => {\n            // console.log(serie.data[params.dataIndex])\n            totalBBR[serie.name] = parseInt(serie.data[params.dataIndex][1]);\n          })\n          let costTotalTempo = (\n            (totalBBR['HPJB'] * barData['HPJB'].cost / 1000)\n            + (totalBBR['HCJB'] * barData['HCJB'].cost / 1000)\n            + (totalBBR['HPJW'] * barData['HPJW'].cost / 1000)\n            + (totalBBR['HCJW'] * barData['HCJW'].cost / 1000)\n            + (totalBBR['HPJR'] * barData['HPJR'].cost / 1000)\n            + (totalBBR['HCJR'] * barData['HCJR'].cost / 1000)\n          ).toFixed(1)\n          display = \"                 \" + costTotalTempo + \" €\";\n          break\n      }\n      return display\n    }\n  }\n}\n\n/**\n * Enable Data Zoom by default\n */\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n/**\n * Update Time Range on Zoom\n */\ncontext.panel.chart.on('datazoom', function (params) {\n  // console.log(params)\n  const startValue = params.batch[0]?.startValue;\n  const endValue = params.batch[0]?.endValue;\n  context.grafana.locationService.partial({ from: startValue, to: endValue });\n});\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n  },\n  legend: {\n    left: '0',\n    bottom: '0',\n    data: context.panel.data.series.map((s) => s.refId.replace(\"Teleinfo-BBR\", \"\")),\n    textStyle: {\n      color: 'rgba(128, 128, 128, .9)',\n    },\n  },\n  toolbox: {\n    feature: {\n      dataZoom: {\n        yAxisIndex: 'none',\n        icon: {\n          zoom: 'path://',\n          back: 'path://',\n        },\n      },\n      saveAsImage: {},\n    }\n  },\n  xAxis: {\n    // type: 'time',\n    type: 'category',\n    axisLabel: {\n      rotate: 45,\n      // formatter: '{value} Wh'\n      formatter: function (d) {\n        // console.log(d)\n        let date = new Date(parseInt(d))\n        return date.toDateString().slice(0, 10) + \" - \" + date.getHours() + \"h\";\n      }\n    }\n  },\n  yAxis: {\n    type: 'value',\n    min: '0',\n    axisLabel: {\n      rotate: 0,\n      //formatter: '{value} Wh'\n      formatter: function (d) {\n        // console.log(d)\n        return \"\" + (d / 1000).toFixed(0) + \" kWh\";\n      }\n    }\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '2%',\n    bottom: 24,\n    containLabel: true,\n  },\n  series,\n};",
            "google": {
              "callback": "gmapReady",
              "key": ""
            },
            "map": "none",
            "renderer": "svg",
            "themeEditor": {
              "config": "{}",
              "height": 400,
              "name": "default"
            },
            "visualEditor": {
              "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
              "dataset": [],
              "series": []
            }
          },
          "pluginVersion": "6.0.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "((increase(sensors_teleinfo_BBRHPJB{location=\"main\",db=\"sensors\"}[1h]) offset -1h)) or vector(0)",
              "hide": false,
              "legendFormat": "HPJB",
              "range": true,
              "refId": "Teleinfo-BBRHPJB"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "((increase(sensors_teleinfo_BBRHCJB{location=\"main\",db=\"sensors\"}[1h]) offset -1h)) or vector(0)",
              "hide": false,
              "legendFormat": "HCJB",
              "range": true,
              "refId": "Teleinfo-BBRHCJB"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "((increase(sensors_teleinfo_BBRHPJW{location=\"main\",db=\"sensors\"}[1h]) offset -1h)) or vector(0)",
              "hide": false,
              "legendFormat": "HPJW",
              "range": true,
              "refId": "Teleinfo-BBRHPJW"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "((increase(sensors_teleinfo_BBRHCJW{location=\"main\",db=\"sensors\"}[1h]) offset -1h)) or vector(0)",
              "hide": false,
              "legendFormat": "HCJW",
              "range": true,
              "refId": "Teleinfo-BBRHCJW"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "((increase(sensors_teleinfo_BBRHPJR{location=\"main\",db=\"sensors\"}[1h]) offset -1h)) or vector(0)",
              "hide": false,
              "legendFormat": "HPJR",
              "range": true,
              "refId": "Teleinfo-BBRHPJR"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "((increase(sensors_teleinfo_BBRHCJR{location=\"main\",db=\"sensors\"}[1h]) offset -1h)) or vector(0)",
              "hide": false,
              "legendFormat": "HCJR",
              "range": true,
              "refId": "Teleinfo-BBRHCJR"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "((increase(sensors_zigbee_energy_l1{location=\"C02~Garage~PowerMeter\"}[1h]) offset -1h)) or vector(0)",
              "hide": true,
              "legendFormat": "Heures Pleines",
              "range": true,
              "refId": "ClampToGrid"
            }
          ],
          "timeFrom": "144h",
          "title": "Total from grid (1h)",
          "transformations": [
            {
              "id": "filterByValue",
              "options": {
                "filters": [
                  {
                    "config": {
                      "id": "greater",
                      "options": {
                        "value": 90000000
                      }
                    },
                    "fieldName": "Total"
                  }
                ],
                "match": "any",
                "type": "exclude"
              }
            }
          ],
          "transparent": true,
          "type": "volkovlabs-echarts-panel"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "continuous-RdYlGr"
              },
              "custom": {
                "axisBorderShow": false,
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "",
                "axisPlacement": "auto",
                "fillOpacity": 59,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineWidth": 2,
                "scaleDistribution": {
                  "type": "linear"
                },
                "thresholdsStyle": {
                  "mode": "dashed"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "orange",
                    "value": 300
                  },
                  {
                    "color": "red",
                    "value": 1000
                  }
                ]
              },
              "unit": "kwatth"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 12,
            "w": 24,
            "x": 0,
            "y": 48
          },
          "id": 127,
          "interval": "1h",
          "options": {
            "barRadius": 0.25,
            "barWidth": 0.7,
            "colorByField": "Value",
            "fullHighlight": false,
            "groupWidth": 0.7,
            "legend": {
              "calcs": [
                "max"
              ],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": true
            },
            "orientation": "auto",
            "showValue": "always",
            "stacking": "none",
            "text": {
              "valueSize": 9
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            },
            "xTickLabelMaxLength": 10,
            "xTickLabelRotation": -45,
            "xTickLabelSpacing": -100
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "sum(increase(sensors_teleinfo_Wh_Total{}[1h] offset -1h)) or vector(0)",
              "hide": true,
              "legendFormat": "__auto",
              "range": true,
              "refId": "Teleinfo"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "sum(increase(sensors_zigbee_energy_b{location=\"C03~Garage~PowerMeter\"}[1h]))",
              "hide": true,
              "instant": false,
              "legendFormat": "Energy from grid (Wh)",
              "range": true,
              "refId": "EnergyFromGrid"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "sum(increase(sensors_zigbee_energy_produced_b{location=\"C03~Garage~PowerMeter\"}[1h]))",
              "hide": true,
              "instant": false,
              "legendFormat": "Energy to grid (Wh)",
              "range": true,
              "refId": "EnergyToGrid"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "sum(increase(sensors_zigbee_energy_b{location=\"C03~Garage~PowerMeter\"}[1h])) - sum(increase(sensors_zigbee_energy_produced_b{location=\"C03~Garage~PowerMeter\"}[1h]))",
              "hide": false,
              "instant": false,
              "legendFormat": "Energy to grid (Wh)",
              "range": true,
              "refId": "FromToGrid"
            }
          ],
          "timeFrom": "144h",
          "title": "Energy /h",
          "type": "barchart"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "description": "Clamps consumption (kWh)",
          "gridPos": {
            "h": 13,
            "w": 24,
            "x": 0,
            "y": 60
          },
          "id": 130,
          "interval": "1h",
          "options": {
            "baidu": {
              "callback": "bmapReady",
              "key": ""
            },
            "editor": {
              "format": "auto",
              "height": 600
            },
            "editorMode": "code",
            "gaode": {
              "key": "",
              "plugin": "AMap.Scale,AMap.ToolBar"
            },
            "getOption": "var tooltipCallback = (args) => {\n  // console.log(args)\n  let date = new Date(parseInt(args.data[0]))\n  return date.toDateString().slice(0, 10) + '<br />' + args.seriesName + ' ' + Number(args.data[1] / 1000).toFixed(2) + ' kWh';\n}\n\nconst series = context.panel.data.series.map((s) => {\n  const name = s.fields.find((f) => f.type === 'number').config.displayNameFromDS.replace(/P(.*)~(.*)~OnOff/, '$2')\n\n  const sData = s.fields.find((f) => f.type === 'number').values;\n  const sTime = s.fields.find((f) => f.type === 'time').values;\n  // const color = barData[name].color;\n\n  return {\n    name: name,\n    type: 'bar',\n    stack: true,\n    showSymbol: false,\n    symbolSize: 12,\n    areaStyle: {\n      opacity: 0.1,\n    },\n    lineStyle: {\n      width: 1,\n    },\n    // color: color,\n    tooltip: {\n      trigger: 'item',\n      axisPointer: {\n        type: 'shadow',\n      },\n      formatter: tooltipCallback\n    },\n    data: sData.map((d, i) => [sTime[i], d ? Number(d * 1000).toFixed(2) : 0]),\n  };\n});\n\n// top stack bar label\nseries[series.length - 1].label = {\n  normal: {\n    show: true,\n    position: 'top',\n    color: \"white\",\n    fontSize: 12,\n    rotate: 50,\n    formatter: (params) => {\n      let total = 0;\n\n      series.forEach(serie => {\n        serie.data.forEach(value => {\n          // Note to understand below:\n          // IF timestamps are matching\n          // THEN we have a value for the given bar to count\n          if (params.data[0] == value[0]) {\n            // console.log(serie.name + \" \" + value[0] + \"=\" + value[1])\n            total += parseInt(value[1])\n          }\n        })\n      })\n\n      return \"                 \" + (total / 1000).toFixed(1) + \" kWh\";\n    }\n  }\n}\n\nconst legend = context.panel.data.series.map((s) => {\n  const name = s.fields.find((f) => f.type === 'number').config.displayNameFromDS\n  const nameClean = name.replace(/P(.*)~(.*)~OnOff/, '$2')\n  return nameClean\n})\n\n/**\n * Enable Data Zoom by default\n */\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n/**\n * Update Time Range on Zoom\n */\ncontext.panel.chart.on('datazoom', function (params) {\n  // console.log(params)\n  const startValue = params.batch[0]?.startValue;\n  const endValue = params.batch[0]?.endValue;\n  context.grafana.locationService.partial({ from: startValue, to: endValue });\n});\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n  },\n  legend: {\n    left: '0',\n    bottom: '0',\n    data: legend,\n    textStyle: {\n      color: 'rgba(128, 128, 128, .9)',\n    },\n  },\n  toolbox: {\n    feature: {\n      dataZoom: {\n        yAxisIndex: 'none',\n        icon: {\n          zoom: 'path://',\n          back: 'path://',\n        },\n      },\n      saveAsImage: {},\n    }\n  },\n  xAxis: {\n    // type: 'time',\n    type: 'category',\n    axisLabel: {\n      rotate: 45,\n      // formatter: '{value} Wh'\n      formatter: function (d) {\n        // console.log(d)\n        let date = new Date(parseInt(d))\n        return date.toDateString().slice(0, 10) + \" - \" + date.getHours() + \"h\";\n      }\n    }\n  },\n  yAxis: {\n    type: 'value',\n    min: '0',\n    axisLabel: {\n      rotate: 0,\n      //formatter: '{value} Wh'\n      formatter: function (d) {\n        // console.log(d)\n        return \"\" + (d / 1000).toFixed(0) + \" kWh\";\n      }\n    }\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '2%',\n    bottom: 24,\n    containLabel: true,\n  },\n  series,\n};",
            "google": {
              "callback": "gmapReady",
              "key": ""
            },
            "map": "none",
            "renderer": "svg",
            "themeEditor": {
              "config": "{}",
              "height": 400,
              "name": "default"
            },
            "visualEditor": {
              "code": "console.log(context);\nreturn {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
              "dataset": [],
              "series": []
            }
          },
          "pluginVersion": "6.0.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "(increase(sensors_zigbee_energy_l1{location=\"C01~Garage~PowerMeter\",db=\"sensors\"}[1h]) offset -1h)",
              "hide": false,
              "legendFormat": "1-CarCharging",
              "range": true,
              "refId": "1-CarCharging"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "(increase(sensors_zigbee_energy_l2{location=\"C01~Garage~PowerMeter\",db=\"sensors\"}[1h]) offset -1h)",
              "hide": false,
              "legendFormat": "2-WaterHeater",
              "range": true,
              "refId": "2-WaterHeater"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "(increase(sensors_zigbee_energy_l3{location=\"C01~Garage~PowerMeter\",db=\"sensors\"}[1h]) offset -1h)",
              "hide": false,
              "legendFormat": "3-Heaters",
              "range": true,
              "refId": "3-Heaters"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "(increase(sensors_zigbee_energy{location=~\"P.*\",db=\"sensors\"}[1h]) offset -1h)",
              "hide": false,
              "legendFormat": "{{location}}",
              "range": true,
              "refId": "Plugs"
            }
          ],
          "timeFrom": "144h",
          "title": "Clamps (kWh)",
          "transparent": true,
          "type": "volkovlabs-echarts-panel"
        }
      ],
      "repeat": "timelineRange",
      "repeatDirection": "h",
      "title": "Energy Timeline 144h (kWh)",
      "type": "row"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 36
      },
      "id": 23,
      "panels": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisBorderShow": false,
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "insertNulls": false,
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "watt"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total"
                },
                "properties": [
                  {
                    "id": "custom.axisPlacement",
                    "value": "right"
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Teleinfo (raw)"
                },
                "properties": [
                  {
                    "id": "custom.axisPlacement",
                    "value": "right"
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Car+Water+Heating"
                },
                "properties": [
                  {
                    "id": "custom.axisPlacement",
                    "value": "right"
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "CCost-Non-Heating"
                },
                "properties": [
                  {
                    "id": "custom.axisPlacement",
                    "value": "right"
                  }
                ]
              },
              {
                "__systemRef": "hideSeriesFrom",
                "matcher": {
                  "id": "byNames",
                  "options": {
                    "mode": "exclude",
                    "names": [
                      "2-Water Heater"
                    ],
                    "prefix": "All except:",
                    "readOnly": true
                  }
                },
                "properties": [
                  {
                    "id": "custom.hideFrom",
                    "value": {
                      "legend": false,
                      "tooltip": false,
                      "viz": true
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 17,
            "w": 12,
            "x": 0,
            "y": 37
          },
          "id": 29,
          "interval": "5m",
          "options": {
            "legend": {
              "calcs": [
                "last",
                "min",
                "max",
                "mean"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "avg_over_time(sensors_teleinfo_PAPP{}[5m])",
              "hide": false,
              "instant": false,
              "legendFormat": "Total",
              "range": true,
              "refId": "Teleinfo-Total"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "avg_over_time(sensors_zigbee_power_l1{location=\"C01~Garage~PowerMeter\"}[5m])",
              "hide": false,
              "legendFormat": "1-Car Charging",
              "range": true,
              "refId": "1-Car Charging"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "avg_over_time(sensors_zigbee_power_l2{location=\"C01~Garage~PowerMeter\"}[5m])",
              "hide": false,
              "legendFormat": "2-Water Heater",
              "range": true,
              "refId": "2-Water Heater"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "avg_over_time(sensors_zigbee_power_l3{location=\"C01~Garage~PowerMeter\"}[5m])",
              "hide": false,
              "legendFormat": "3-Heaters",
              "range": true,
              "refId": "3-Heaters"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "avg_over_time(sensors_zigbee_power_l2{location=\"C02~Garage~PowerMeter\"}[5m])",
              "hide": false,
              "legendFormat": "4-VMC",
              "range": true,
              "refId": "4-VMC"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "avg_over_time(sensors_zigbee_power{location=\"C01~Garage~PowerMeter\"}[5m])",
              "hide": false,
              "legendFormat": "Car+Water+Heating",
              "range": true,
              "refId": "Car+Water+Heating"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "sensors_teleinfo_PAPP{}",
              "hide": false,
              "instant": false,
              "legendFormat": "Teleinfo (raw)",
              "range": true,
              "refId": "Teleinfo (raw)"
            }
          ],
          "timeFrom": "144h",
          "title": "Clamps (W)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisBorderShow": false,
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "insertNulls": false,
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": true,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "watt"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "P07~Celier~SL~OnOff"
                },
                "properties": [
                  {
                    "id": "custom.axisPlacement",
                    "value": "right"
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "P09~Celier~LL~OnOff"
                },
                "properties": [
                  {
                    "id": "custom.axisPlacement",
                    "value": "right"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 17,
            "w": 12,
            "x": 12,
            "y": 37
          },
          "id": 25,
          "options": {
            "legend": {
              "calcs": [
                "last",
                "min",
                "max",
                "mean"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "sensors_zigbee_power{location=~\"P.+\"}[1m]",
              "hide": false,
              "legendFormat": "{{location}}",
              "range": true,
              "refId": "B"
            }
          ],
          "timeFrom": "72h",
          "title": "Outlets (W)",
          "type": "timeseries"
        }
      ],
      "title": "Power Timeline (W)",
      "type": "row"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 37
      },
      "id": 115,
      "panels": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "none"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "teleinfo-Wh-Total"
                },
                "properties": [
                  {
                    "id": "displayName",
                    "value": "Total"
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "teleinfo-HCHC"
                },
                "properties": [
                  {
                    "id": "displayName",
                    "value": "Heures Creuses"
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "teleinfo-HCHP"
                },
                "properties": [
                  {
                    "id": "displayName",
                    "value": "Heures Pleines"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 17,
            "w": 3,
            "x": 0,
            "y": 38
          },
          "id": 30,
          "options": {
            "colorMode": "value",
            "graphMode": "none",
            "justifyMode": "auto",
            "orientation": "horizontal",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "showPercentChange": false,
            "textMode": "value_and_name",
            "wideLayout": true
          },
          "pluginVersion": "10.4.2",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "sensors_teleinfo_HCHC / 1000",
              "hide": false,
              "instant": true,
              "interval": "",
              "legendFormat": "Heures Creuses",
              "range": false,
              "refId": "B"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "sensors_teleinfo_HCHP / 1000",
              "hide": false,
              "instant": true,
              "interval": "",
              "legendFormat": "Heures Pleines",
              "range": false,
              "refId": "C"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "sensors_teleinfo_Wh_Total / 1000",
              "hide": false,
              "instant": true,
              "interval": "",
              "legendFormat": "Total",
              "range": false,
              "refId": "D"
            }
          ],
          "title": "Index (kWh)",
          "transformations": [
            {
              "id": "calculateField",
              "options": {
                "binary": {
                  "left": "sensors {type: teleinfo-HCHC}",
                  "reducer": "sum",
                  "right": "sensors {type: teleinfo-HCHP}"
                },
                "mode": "binary",
                "reduce": {
                  "reducer": "sum"
                }
              }
            }
          ],
          "type": "stat"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "kwatth"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 17,
            "w": 12,
            "x": 3,
            "y": 38
          },
          "id": 116,
          "options": {
            "colorMode": "value",
            "graphMode": "area",
            "justifyMode": "auto",
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "showPercentChange": false,
            "textMode": "auto",
            "wideLayout": true
          },
          "pluginVersion": "10.4.2",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "(sensors_teleinfo_HCHP{db=\"sensors\",location=\"main\"} - sensors_teleinfo_HCHP{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
              "hide": true,
              "legendFormat": "HP",
              "range": true,
              "refId": "HP"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "(sensors_teleinfo_HCHC{db=\"sensors\",location=\"main\"} - sensors_teleinfo_HCHC{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
              "hide": true,
              "legendFormat": "HC",
              "range": true,
              "refId": "HC"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "(sensors_teleinfo_BBRHPJB{db=\"sensors\",location=\"main\"} - sensors_teleinfo_BBRHPJB{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
              "hide": true,
              "legendFormat": "HPJB",
              "range": true,
              "refId": "HPJB"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "(sensors_teleinfo_BBRHPJW{db=\"sensors\",location=\"main\"} - sensors_teleinfo_BBRHPJW{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
              "hide": true,
              "legendFormat": "HPJW",
              "range": true,
              "refId": "HPJW"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "(sensors_teleinfo_BBRHPJR{db=\"sensors\",location=\"main\"} - sensors_teleinfo_BBRHPJR{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
              "hide": true,
              "legendFormat": "HPJR",
              "range": true,
              "refId": "HPJR"
            },
            {
              "datasource": {
                "name": "Expression",
                "type": "__expr__",
                "uid": "__expr__"
              },
              "expression": "$HPJB + $HPJW + $HPJR",
              "hide": true,
              "refId": "TotalHP",
              "type": "math"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "(sensors_teleinfo_BBRHCJB{db=\"sensors\",location=\"main\"} - sensors_teleinfo_BBRHCJB{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
              "hide": true,
              "legendFormat": "HCJB",
              "range": true,
              "refId": "HCJB"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "(sensors_teleinfo_BBRHCJW{db=\"sensors\",location=\"main\"} - sensors_teleinfo_BBRHCJW{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
              "hide": true,
              "legendFormat": "HCJW",
              "range": true,
              "refId": "HCJW"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "(sensors_teleinfo_BBRHCJR{db=\"sensors\",location=\"main\"} - sensors_teleinfo_BBRHCJR{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
              "hide": true,
              "legendFormat": "HCJR",
              "range": true,
              "refId": "HCJR"
            },
            {
              "datasource": {
                "name": "Expression",
                "type": "__expr__",
                "uid": "__expr__"
              },
              "expression": "$HCJB + $HCJW + $HCJR",
              "hide": true,
              "refId": "TotalHC",
              "type": "math"
            },
            {
              "datasource": {
                "name": "Expression",
                "type": "__expr__",
                "uid": "__expr__"
              },
              "expression": "$TotalHP + $TotalHC",
              "hide": true,
              "refId": "Total",
              "type": "math"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "avg(sensors_zigbee_energy_l1{location=\"C01~Garage~PowerMeter\"} - (sensors_zigbee_energy_l1{location=\"C01~Garage~PowerMeter\"} offset $nbDays))",
              "hide": false,
              "legendFormat": "Car",
              "range": true,
              "refId": "Car"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "avg(sensors_zigbee_energy_l2{location=\"C01~Garage~PowerMeter\"} - (sensors_zigbee_energy_l2{location=\"C01~Garage~PowerMeter\"} offset $nbDays))",
              "hide": false,
              "legendFormat": "Water",
              "range": true,
              "refId": "Water"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "avg(sensors_zigbee_energy_l3{location=\"C01~Garage~PowerMeter\"} - (sensors_zigbee_energy_l3{location=\"C01~Garage~PowerMeter\"} offset $nbDays))",
              "hide": false,
              "legendFormat": "Heaters",
              "range": true,
              "refId": "Heaters"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "sensors_zigbee_energy{location=~\"P.*\"} - (sensors_zigbee_energy{location=~\"P.*\"} offset $nbDays)",
              "hide": false,
              "legendFormat": "{{location}}",
              "range": true,
              "refId": "Plugs"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "avg(sensors_zigbee_energy{location=\"C01~Garage~PowerMeter\"} - (sensors_zigbee_energy{location=\"C01~Garage~PowerMeter\"} offset $nbDays))",
              "hide": false,
              "legendFormat": "TotalClamps",
              "range": true,
              "refId": "TotalClamps"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "sum(sensors_zigbee_energy{location=~\"P.*\"} - (sensors_zigbee_energy{location=~\"P.*\"} offset $nbDays))",
              "hide": false,
              "legendFormat": "TotalPlugs",
              "range": true,
              "refId": "TotalPlugs"
            },
            {
              "datasource": {
                "name": "Expression",
                "type": "__expr__",
                "uid": "__expr__"
              },
              "expression": "$Total - $TotalClamps - $TotalPlugs",
              "hide": false,
              "refId": "Other",
              "type": "math"
            }
          ],
          "title": "Range values ($nbDays)",
          "type": "stat"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "VictoriaMetrics"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "kwatth"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 17,
            "w": 9,
            "x": 15,
            "y": 38
          },
          "id": 112,
          "options": {
            "colorMode": "value",
            "graphMode": "area",
            "justifyMode": "auto",
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "showPercentChange": false,
            "textMode": "auto",
            "wideLayout": true
          },
          "pluginVersion": "10.4.2",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "(sensors_teleinfo_HCHP{db=\"sensors\",location=\"main\"} - sensors_teleinfo_HCHP{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
              "hide": true,
              "legendFormat": "HP",
              "range": true,
              "refId": "HP"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "(sensors_teleinfo_HCHC{db=\"sensors\",location=\"main\"} - sensors_teleinfo_HCHC{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
              "hide": true,
              "legendFormat": "HC",
              "range": true,
              "refId": "HC"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "(sensors_teleinfo_BBRHPJB{db=\"sensors\",location=\"main\"} - sensors_teleinfo_BBRHPJB{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
              "hide": false,
              "legendFormat": "HPJB",
              "range": true,
              "refId": "HPJB"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "(sensors_teleinfo_BBRHPJW{db=\"sensors\",location=\"main\"} - sensors_teleinfo_BBRHPJW{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
              "hide": false,
              "legendFormat": "HPJW",
              "range": true,
              "refId": "HPJW"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "(sensors_teleinfo_BBRHPJR{db=\"sensors\",location=\"main\"} - sensors_teleinfo_BBRHPJR{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
              "hide": false,
              "legendFormat": "HPJR",
              "range": true,
              "refId": "HPJR"
            },
            {
              "datasource": {
                "name": "Expression",
                "type": "__expr__",
                "uid": "__expr__"
              },
              "expression": "$HPJB + $HPJW + $HPJR",
              "hide": false,
              "refId": "TotalHP",
              "type": "math"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "(sensors_teleinfo_BBRHCJB{db=\"sensors\",location=\"main\"} - sensors_teleinfo_BBRHCJB{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
              "legendFormat": "HCJB",
              "range": true,
              "refId": "HCJB"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "(sensors_teleinfo_BBRHCJW{db=\"sensors\",location=\"main\"} - sensors_teleinfo_BBRHCJW{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
              "hide": false,
              "legendFormat": "HCJW",
              "range": true,
              "refId": "HCJW"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "(sensors_teleinfo_BBRHCJR{db=\"sensors\",location=\"main\"} - sensors_teleinfo_BBRHCJR{db=\"sensors\",location=\"main\"} offset $nbDays) / 1000",
              "hide": false,
              "legendFormat": "HCJR",
              "range": true,
              "refId": "HCJR"
            },
            {
              "datasource": {
                "name": "Expression",
                "type": "__expr__",
                "uid": "__expr__"
              },
              "expression": "$HCJB + $HCJW + $HCJR",
              "hide": false,
              "refId": "TotalHC",
              "type": "math"
            },
            {
              "datasource": {
                "name": "Expression",
                "type": "__expr__",
                "uid": "__expr__"
              },
              "expression": "$TotalHP + $TotalHC",
              "hide": true,
              "refId": "Total",
              "type": "math"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "avg(sensors_zigbee_energy_l1{location=\"C01~Garage~PowerMeter\"} - (sensors_zigbee_energy_l1{location=\"C01~Garage~PowerMeter\"} offset $nbDays))",
              "hide": true,
              "legendFormat": "Car",
              "range": true,
              "refId": "Car"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "avg(sensors_zigbee_energy_l2{location=\"C01~Garage~PowerMeter\"} - (sensors_zigbee_energy_l2{location=\"C01~Garage~PowerMeter\"} offset $nbDays))",
              "hide": true,
              "legendFormat": "Water",
              "range": true,
              "refId": "Water"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "avg(sensors_zigbee_energy_l3{location=\"C01~Garage~PowerMeter\"} - (sensors_zigbee_energy_l3{location=\"C01~Garage~PowerMeter\"} offset $nbDays))",
              "hide": true,
              "legendFormat": "Heaters",
              "range": true,
              "refId": "Heaters"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "sensors_zigbee_energy{location=~\"P.*\"} - (sensors_zigbee_energy{location=~\"P.*\"} offset $nbDays)",
              "hide": true,
              "legendFormat": "{{location}}",
              "range": true,
              "refId": "Plugs"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "avg(sensors_zigbee_energy{location=\"C01~Garage~PowerMeter\"} - (sensors_zigbee_energy{location=\"C01~Garage~PowerMeter\"} offset $nbDays))",
              "hide": true,
              "legendFormat": "TotalClamps",
              "range": true,
              "refId": "TotalClamps"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "VictoriaMetrics"
              },
              "editorMode": "code",
              "expr": "sum(sensors_zigbee_energy{location=~\"P.*\"} - (sensors_zigbee_energy{location=~\"P.*\"} offset $nbDays))",
              "hide": true,
              "legendFormat": "TotalPlugs",
              "range": true,
              "refId": "TotalPlugs"
            },
            {
              "datasource": {
                "name": "Expression",
                "type": "__expr__",
                "uid": "__expr__"
              },
              "expression": "$Total - $TotalClamps - $TotalPlugs",
              "hide": true,
              "refId": "Other",
              "type": "math"
            }
          ],
          "title": "Range values ($nbDays)",
          "type": "stat"
        }
      ],
      "title": "Troubleshooting",
      "type": "row"
    }
  ],
  "refresh": "5m",
  "revision": 1,
  "schemaVersion": 39,
  "tags": [],
  "templating": {
    "list": [
      {
        "description": "Cost of kWh normal price",
        "hide": 2,
        "label": "kWhHP",
        "name": "kWhBase",
        "query": "0.2516",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "description": "Cost of kWh during high cost hours",
        "hide": 2,
        "label": "kWhHP",
        "name": "kWhHP",
        "query": "0.2700",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "description": "Cost of kWh during low cost hours",
        "hide": 2,
        "label": "kWhHC",
        "name": "kWhHC",
        "query": "0.2068",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "hide": 2,
        "label": "kWhTBHC",
        "name": "kWhTBHC",
        "query": "0.1296",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "hide": 2,
        "label": "kWhTBH9",
        "name": "kWhTBHP",
        "query": "0.1609",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "hide": 2,
        "label": "kWhTWHC",
        "name": "kWhTWHC",
        "query": "0.1486",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "hide": 2,
        "label": "kWhTWHP",
        "name": "kWhTWHP",
        "query": "0.1894",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "hide": 2,
        "label": "kWhTRHC",
        "name": "kWhTRHC",
        "query": "0.1568",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "hide": 2,
        "label": "kWhTRHP",
        "name": "kWhTRHP",
        "query": "0.7564",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "hide": 2,
        "label": "1 Day",
        "name": "day1",
        "query": "1d",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "hide": 2,
        "label": "7 Day",
        "name": "day7",
        "query": "7d",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "hide": 2,
        "label": "30 Day",
        "name": "day30",
        "query": "30d",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "hide": 2,
        "label": "60 Day",
        "name": "day60",
        "query": "60d",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "hide": 2,
        "label": "365 Day",
        "name": "day365",
        "query": "365d",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "current": {
          "selected": false,
          "text": "365d",
          "value": "365d"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Days in Donut",
        "multi": false,
        "name": "nbDays",
        "options": [
          {
            "selected": false,
            "text": "1d",
            "value": "1d"
          },
          {
            "selected": false,
            "text": "7d",
            "value": "7d"
          },
          {
            "selected": false,
            "text": "30d",
            "value": "30d"
          },
          {
            "selected": false,
            "text": "60d",
            "value": "60d"
          },
          {
            "selected": false,
            "text": "90d",
            "value": "90d"
          },
          {
            "selected": false,
            "text": "180d",
            "value": "180d"
          },
          {
            "selected": true,
            "text": "365d",
            "value": "365d"
          }
        ],
        "query": "1d,7d,30d,60d,90d,180d,365d",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "percent",
          "value": "percent"
        },
        "description": "Show donut values as",
        "hide": 0,
        "includeAll": false,
        "label": "Donut Value As",
        "multi": false,
        "name": "donutValueAs",
        "options": [
          {
            "selected": true,
            "text": "percent",
            "value": "percent"
          },
          {
            "selected": false,
            "text": "kWh",
            "value": "kWh"
          },
          {
            "selected": false,
            "text": "€",
            "value": "€"
          }
        ],
        "query": "percent,kWh,€",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "1d",
          "value": "1d"
        },
        "description": "Range for Timeline",
        "hide": 0,
        "includeAll": false,
        "label": "Timeline Range",
        "multi": false,
        "name": "timelineRange",
        "options": [
          {
            "selected": false,
            "text": "1h",
            "value": "1h"
          },
          {
            "selected": true,
            "text": "1d",
            "value": "1d"
          },
          {
            "selected": false,
            "text": "1w",
            "value": "1w"
          }
        ],
        "query": "1h,1d,1w",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "kWh",
          "value": "kWh"
        },
        "description": "Base, Blue or Tempo",
        "hide": 0,
        "includeAll": false,
        "label": "Timeline Total",
        "multi": false,
        "name": "timelineTotal",
        "options": [
          {
            "selected": true,
            "text": "kWh",
            "value": "kWh"
          },
          {
            "selected": false,
            "text": "tempo",
            "value": "tempo"
          },
          {
            "selected": false,
            "text": "blue",
            "value": "blue"
          },
          {
            "selected": false,
            "text": "base",
            "value": "base"
          }
        ],
        "query": "kWh,tempo,blue,base",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "now-30d",
    "to": "now"
  },
  "timepicker": {
    "hidden": false,
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h"
    ]
  },
  "timezone": "",
  "title": "Tidhome - Power",
  "uid": "YjE61Qdnz",
  "version": 180,
  "weekStart": "monday"
}